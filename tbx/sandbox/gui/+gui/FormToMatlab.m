
classdef FormToMatlab

    methods (Static)

        function out = separate(in)
            arguments
                in (1, 1) string
            end
            out = reshape(split(in, "+"), 1, []);
            out(out=="") = [];
        end%

        function out = resolveSpecialCharacters(in)
            arguments
                in (1, :) string
            end
            table = gui.FormToMatlab.RESOLUTION_TABLE;
            out = regexprep(in, "%(..)", "${table.(""x"" + $1)}");
        end%

        function out = receive(in, options)
            arguments
                in (1, 1) string
                options.separate (1, 1) logical = true
                options.strip (1, 1) logical = true
            end
            out = in;
            if options.separate
                out = gui.FormToMatlab.separate(out);
            end
            out = gui.FormToMatlab.resolveSpecialCharacters(out);
            if options.strip
                out = strip(out);
            end
        end%

        function matlab = string(form)
            form = gui.FormToMatlab.receive(form, separate=false);
            matlab = form;
        end%

        function matlab = name(form)
            form = gui.FormToMatlab.receive(form);
            if isempty(form)
                form = "";
            end
            if numel(form) ~= 1
                error("Invalid name: %s", join(form, " "));
            end
            matlab = form;
            gui.FormToMatlab.validateNames(matlab, form);
        end%

        function matlab = names(form)
            form = gui.FormToMatlab.receive(form);
            if isempty(form)
                matlab = string.empty(1, 0);
                return
            end
            matlab = regexp(form, "[a-zA-Z_]\w*", "match", "once");
            matlab = reshape(matlab, 1, []);
            gui.FormToMatlab.validateNames(matlab, form);
        end%

        function validateNames(names, form)
            validIndex = arrayfun(@isvarname, names);
            if ~all(validIndex)
                error("Invalid name(s): %s", join(form, " "));
            end
        end%

        function matlab = number(form)
            form = gui.FormToMatlab.receive(form);
            if isempty(form)
                form = "";
            end
            if numel(form) ~= 1
                error("Invalid number: %s", join(form, " "));
            end
            matlab = double(form);
            if isnan(matlab)
                error("Invalid number: %s", join(form, " "));
            end
        end%

        function matlab = numbers(form)
            form = gui.FormToMatlab.receive(form);
            if isempty(form)
                matlab = double.empty(1, 0);
                return
            end
            matlab = double(form);
            if any(isnan(matlab))
                error("Invalid number: %s", join(form, " "));
            end
        end%

        function matlab = logical(form)
            form = gui.FormToMatlab.receive(form);
            if numel(form) ~= 1
                error("Invalid logical value: %s", join(form, " "));
            end
            if form == "true" || form == "1"
                matlab = true;
            elseif form == "false" || form == "0"
                matlab = false;
            else
                error("Invalid logical value: %s", join(form, " "));
            end
        end%

    end


    properties (Constant)
        RESOLUTION_TABLE = struct( ...
            x20=" ", ...
            x21="!", ...
            x22="""", ...
            x23="#", ...
            x24="$", ...
            x25="%", ...
            x26="&", ...
            x27="'", ...
            x28="(", ...
            x29=")", ...
            x2A="*", ...
            x2B="+", ...
            x2C=",", ...
            x2D="-", ...
            x2E=".", ...
            x2F="/", ...
            x30="0", ...
            x31="1", ...
            x32="2", ...
            x33="3", ...
            x34="4", ...
            x35="5", ...
            x36="6", ...
            x37="7", ...
            x38="8", ...
            x39="9", ...
            x3A=":", ...
            x3B=";", ...
            x3C="<", ...
            x3D="=", ...
            x3E=">", ...
            x3F="?", ...
            x40="@", ...
            x41="A", ...
            x42="B", ...
            x43="C", ...
            x44="D", ...
            x45="E", ...
            x46="F", ...
            x47="G", ...
            x48="H", ...
            x49="I", ...
            x4A="J", ...
            x4B="K", ...
            x4C="L", ...
            x4D="M", ...
            x4E="N", ...
            x4F="O", ...
            x50="P", ...
            x51="Q", ...
            x52="R", ...
            x53="S", ...
            x54="T", ...
            x55="U", ...
            x56="V", ...
            x57="W", ...
            x58="X", ...
            x59="Y", ...
            x5A="Z", ...
            x5B="[", ...
            x5C="\", ...
            x5D="]", ...
            x5E="^", ...
            x5F="_", ...
            x60="`", ...
            x61="a", ...
            x62="b", ...
            x63="c", ...
            x64="d", ...
            x65="e", ...
            x66="f", ...
            x67="g", ...
            x68="h", ...
            x69="i", ...
            x6A="j", ...
            x6B="k", ...
            x6C="l", ...
            x6D="m", ...
            x6E="n", ...
            x6F="o", ...
            x70="p", ...
            x71="q", ...
            x72="r", ...
            x73="s", ...
            x74="t", ...
            x75="u", ...
            x76="v", ...
            x77="w", ...
            x78="x", ...
            x79="y", ...
            x7A="z", ...
            x7B="{", ...
            x7C="|", ...
            x7D="}", ...
            x7E="~" ...
        )
    end

end
